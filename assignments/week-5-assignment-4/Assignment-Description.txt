Week 5: Programming Assignment 4

Released Monday, June 9th, 2014
Due Monday, June 24th, 2014

In this assignment, you will implement a program that uses a
pattern-oriented framework to spawn threads that correctly alternate
printing "Ping" and "Pong", respectively on either the command-line
display (of the Eclipse IDE) or in an Android TextView (in either the
AVD emulator or on an actual Android device).  In this directory
you'll find Java source code, AndroidManifest.xml, and associated XML
metadata files.  The src/edu/vuum/mocca/ directory contains the
skeleton Java code that you'll implement by completing the "TODO - You
fill in here" comments to provide a working solution.  DO NOT CHANGE
THE OVERALL STRUCTURE OF THE SKELETON - just fill in the "TODO - You
fill in here" portions!!!

In particular, you'll need to do the following:

. Read & understand the PingPongThreadSema and PingPongThreadCond
  classes, which are covered in these videos:
  
  Section 1: Module 2: Part 10: Java Synchronization and Schedule Example

. To understand these classes you'll also want to understand the Java
  ReentrantLock, ConditionObject, and Semaphore classes, which are
  covered in these videos:

  Section 1: Module 2: Part 5: Java ReentrantLock
  Section 1: Module 2: Part 7: Java Semaphore
  Section 1: Module 2: Part 8: Java ConditionObject

. Implement the hook methods in the AndroidPlatformStrategy.java class
  that use a Java CountDownLatch and Activity's runOnUiThread() method
  to post a Runnable command to the UI Thread, which are covered in
  these videos:

  Section 1: Module 2: Part 9: Java CountDownLatch
  Section 1: Module 2: Part 10: Java Synchronization and Scheduling Example

  There following videos on the Android HaMeR concurrency framework
  may also be useful to understand what's going on, especially the
  Part 4, which shows how the Activity.runOnUiThread() method works.

  Section 1: Module 3: Part 1: Overview of Android Concurrency Frameworks and Idioms
  Section 1: Module 3: Part 2: Android Looper
  Section 1: Module 3: Part 3: Overview of Android Handler
  Section 1: Module 3: Part 4: Posting and Processing Runnables to Android Handler

These videos are available at

https://class.coursera.org/posa-002/lecture

We'll also discuss this assignment specification (and later its
solution) in the POSA MOOC "Virtual Office Hours", which are described
in item #38 at the POSA MOOC FAQ available from

http://www.courera.org/course/posa

You'll need to build this Android application in the Eclipse ADT
environment.  By default, the output for the correct solution should
look like this (for both the Eclipse command-line and Android
versions):

Ready...Set...Go!
Ping!(1)
Pong!(1)
Ping!(2)
Pong!(2)
Ping!(3)
Pong!(3)
Ping!(4)
Pong!(4)
Ping!(5)
Pong!(5)
Ping!(6)
Pong!(6)
Ping!(7)
Pong!(7)
Ping!(8)
Pong!(8)
Ping!(9)
Pong!(9)
Ping!(10)
Pong!(10)
Done!

The 'means' by which to get the tests to run in this project is a bit
more complex than in other projects due to the Eclipse Java console &
Android code co-existing in the same code base.  Since the Java code
doesn't really understand Android dependencies, some additional steps
were taken to assist you in both executing and testing the code.

There are two projects 'W5-A4' and 'W5-A4 Test' that must be imported
via the traditional project import method (Make sure to select 'search
for nested projects' on the import screen).  We have included 4
'Launch Configurations' for Eclipse along with this project.  To make
use of these launc configurations, after importing these projects, you
will have to [right click] on the first project and select [Run
As]->[Run Configurations...], which will bring the 'run
configurations' window up.  Inside this window under 'Android Junit
Test' there will be a configuration called 'Android Tests'. Select it,
and press the 'Run' button.

This process can be repeated 3 more times, with 'Console Conditional
Execution', 'Console Semaphore Execution' being under the 'Java
Appplication' section, and 'Console Tests' being under the 'Junit'
section.  These will all be selected from within the [Run
Configurations] window.  Once each of the 4 total run-configurations
has been selected once, They will show up under [Run]->[Run History]
for easier access.




